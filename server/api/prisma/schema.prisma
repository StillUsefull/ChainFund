// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER
}

enum Category {
  MILITARY
  HEALTH
  DEVELOPMENT
  TECH
  ECO
  ART
}

model User {
  id          String @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  semi        String?
  telegram    String?
  photo       String?
  role        Role     @default(USER)
  transaction Transaction[]
  token       Token[]
  posts       Post[]
  collections CashCollection[] 
  comments    Comment[]
  createdAt   DateTime @default(now())
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Post {
  id         String @id @default(uuid())
  title      String?   @db.VarChar(255)
  text       String?
  socialLink String?
  photo      String?
  publish    Boolean @default(false)
  archived   Boolean @default(false)
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CashCollection {
  id           String @id @default(uuid())
  title        String?
  photo        String?
  author       User? @relation(fields: [authorId], references: [id])
  authorId     String? 
  goal         Float?
  state        Float @default(0)
  rating       String[] @default([])
  text         String?
  googlePay    String?
  category     Category
  comments     Comment[] 
  transactions Transaction[]
  publish      Boolean @default(false)
  achieved      Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Transaction {
  id                String     @id @default(uuid())
  amount            Float      
  cashCollection    CashCollection? @relation(fields: [cashCollectionId], references: [id])
  cashCollectionId  String?  
  user              User?       @relation(fields: [userId], references: [id])
  userId            String?   
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}


model Comment {
  id            String @id @default(uuid())
  author        User @relation(fields: [authorId], references: [id])
  authorId      String
  text          String
  collection    CashCollection @relation(fields: [collectionId], references: [id])
  collectionId  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}