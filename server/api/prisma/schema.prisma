// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER
}

model User {
  id          String @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  telegram    String?
  role        Role     @default(USER)
  Token       Token[]
  posts       Post[]
  collections CashCollection[] 
  comments    Comment[]
  createdAt DateTime @default(now())
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Post {
  id        String @id @default(uuid())
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CashCollection {
  id        String @id @default(uuid())
  title     String
  author    User? @relation(fields: [authorId], references: [id])
  authorId  String? 
  goal      Float
  state     Float
  text      String
  comments  Comment[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Comment {
  id            String @id @default(uuid())
  author        User @relation(fields: [authorId], references: [id])
  authorId      String
  text          String
  collection    CashCollection @relation(fields: [collectionId], references: [id])
  collectionId  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}